name: pipeline

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write   # needed to upload SARIF to "Code scanning alerts"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: gosec
        run: |
          gosec -conf .gosec.json ./...

      - name: gosec reports (SARIF + HTML)
        if: always()
        run: |
          mkdir -p reports
          gosec -conf .gosec.json -fmt sarif -out reports/gosec.sarif ./... || true
          gosec -conf .gosec.json -fmt html  -out reports/gosec.html  ./... || true

      - name: Upload SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/gosec.sarif

      - name: Upload HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gosec-html
          path: reports/gosec.html
          if-no-files-found: ignore
  release:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create new minor tag only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # fetch tags
          git fetch --tags

          # find latest semantic tag like vMAJOR.MINOR.PATCH
          latest=$(git tag --list 'v[0-9]*' --sort=-v:refname | head -n1 || true)
          if [ -z "$latest" ]; then
            latest="v0.0.0"
          fi

          # strip leading "v" and split
          ver=${latest#v}
          IFS='.' read -r major minor patch <<< "$ver"

          # increment minor, reset patch
          minor=$((minor + 1))
          patch=0

          new_tag="v${major}.${minor}.${patch}"
          echo "Latest tag: $latest"
          echo "Creating new tag: $new_tag"

          # configure git and create annotated tag
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "$new_tag" -m "chore: bump minor version to $new_tag"

          # push the new tag using the GITHUB_TOKEN
          git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${REPO}" "$new_tag"